/**
 * Script de Migraci√≥n - Aplicar Soft Delete a Datos Existentes
 * 
 * Este script debe ejecutarse UNA SOLA VEZ despu√©s de implementar el soft delete
 * para agregar los campos necesarios a los documentos existentes en la base de datos.
 */

import mongoose from 'mongoose';
import config from '../src/config/index.js';

const runMigration = async () => {
  try {
    // Conectar a MongoDB
    await mongoose.connect(config.dbUri);
    console.log('üîó Conectado a MongoDB para migraci√≥n');

    // Obtener referencias a las colecciones
    const db = mongoose.connection.db;
    const usersCollection = db.collection('users');
    const personasCollection = db.collection('personas');

    console.log('üöÄ Iniciando migraci√≥n de Soft Delete...');

    // 1. Migrar colecci√≥n de Users
    const usersResult = await usersCollection.updateMany(
      { 
        isDeleted: { $exists: false } 
      },
      { 
        $set: { 
          isDeleted: false 
        } 
      }
    );

    console.log(`üë• Users migrados: ${usersResult.modifiedCount} documentos actualizados`);

    // 2. Migrar colecci√≥n de Personas
    const personasResult = await personasCollection.updateMany(
      { 
        isDeleted: { $exists: false } 
      },
      { 
        $set: { 
          isDeleted: false 
        } 
      }
    );

    console.log(`üë§ Personas migradas: ${personasResult.modifiedCount} documentos actualizados`);

    // 3. Crear √≠ndices para mejorar performance
    console.log('üìä Creando √≠ndices para optimizaci√≥n...');

    // √çndices para Users
    await usersCollection.createIndex({ isDeleted: 1 });
    await usersCollection.createIndex({ isDeleted: 1, deletedAt: 1 });
    console.log('‚úÖ √çndices creados para Users');

    // √çndices para Personas
    await personasCollection.createIndex({ isDeleted: 1 });
    await personasCollection.createIndex({ isDeleted: 1, deletedAt: 1 });
    console.log('‚úÖ √çndices creados para Personas');

    // 4. Verificar migraci√≥n
    const totalUsers = await usersCollection.countDocuments();
    const activeUsers = await usersCollection.countDocuments({ isDeleted: false });
    const deletedUsers = await usersCollection.countDocuments({ isDeleted: true });

    const totalPersonas = await personasCollection.countDocuments();
    const activePersonas = await personasCollection.countDocuments({ isDeleted: false });
    const deletedPersonas = await personasCollection.countDocuments({ isDeleted: true });

    console.log('üîç Verificaci√≥n de migraci√≥n:');
    console.log(`   Users - Total: ${totalUsers}, Activos: ${activeUsers}, Eliminados: ${deletedUsers}`);
    console.log(`   Personas - Total: ${totalPersonas}, Activas: ${activePersonas}, Eliminadas: ${deletedPersonas}`);

    console.log('‚úÖ Migraci√≥n de Soft Delete completada exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n:', error);
    process.exit(1);
  } finally {
    // Cerrar conexi√≥n
    await mongoose.disconnect();
    console.log('üîå Desconectado de MongoDB');
    process.exit(0);
  }
};

// Funci√≥n para revertir migraci√≥n (en caso de emergencia)
const revertMigration = async () => {
  try {
    await mongoose.connect(config.dbUri);
    console.log('üîó Conectado a MongoDB para reversar migraci√≥n');

    const db = mongoose.connection.db;
    const usersCollection = db.collection('users');
    const personasCollection = db.collection('personas');

    console.log('‚ö†Ô∏è  Reversando migraci√≥n de Soft Delete...');

    // Remover campos de soft delete (solo de documentos que no est√°n eliminados)
    const usersResult = await usersCollection.updateMany(
      { isDeleted: false },
      { 
        $unset: { 
          isDeleted: 1,
          deletedAt: 1,
          deletedBy: 1,
          restoredAt: 1,
          restoredBy: 1
        } 
      }
    );

    const personasResult = await personasCollection.updateMany(
      { isDeleted: false },
      { 
        $unset: { 
          isDeleted: 1,
          deletedAt: 1,
          deletedBy: 1,
          restoredAt: 1,
          restoredBy: 1
        } 
      }
    );

    console.log(`üë• Users revertidos: ${usersResult.modifiedCount}`);
    console.log(`üë§ Personas revertidas: ${personasResult.modifiedCount}`);
    console.log('‚ö†Ô∏è  ADVERTENCIA: Los documentos con isDeleted: true NO fueron modificados');
    console.log('‚úÖ Reversi√≥n completada');

  } catch (error) {
    console.error('‚ùå Error durante la reversi√≥n:', error);
  } finally {
    await mongoose.disconnect();
    process.exit(0);
  }
};

// Verificar argumentos de l√≠nea de comandos
const args = process.argv.slice(2);

if (args.includes('--revert')) {
  console.log('‚ö†Ô∏è  MODO REVERSI√ìN ACTIVADO');
  console.log('‚ö†Ô∏è  Esto remover√° los campos de soft delete de documentos activos');
  revertMigration();
} else {
  console.log('üöÄ MODO MIGRACI√ìN NORMAL');
  console.log('üìù Agregando campos de soft delete a documentos existentes');
  runMigration();
}

// Agregar informaci√≥n de uso
console.log(`
üìö INSTRUCCIONES DE USO:

üöÄ Aplicar migraci√≥n (normal):
   node migration/soft-delete-migration.js

‚ö†Ô∏è  Revertir migraci√≥n (emergencia):
   node migration/soft-delete-migration.js --revert

üìù NOTAS IMPORTANTES:
   - Este script debe ejecutarse UNA SOLA VEZ despu√©s de implementar soft delete
   - La reversi√≥n NO afecta documentos que est√°n marcados como eliminados
   - Se recomienda hacer backup de la base de datos antes de ejecutar
   - Los √≠ndices mejoran significativamente el rendimiento de las consultas
`);
