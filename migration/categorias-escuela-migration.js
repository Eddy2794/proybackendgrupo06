import mongoose from 'mongoose';
import CategoriaEscuela from '../src/modules/categoria-escuela/model/categoriaEscuela.model.js';
import logger from '../src/utils/logger.js';

/**
 * Migraci√≥n para crear categor√≠as de escuela de f√∫tbol por defecto
 */

const categoriasPorDefecto = [
  {
    nombre: "Infantil Sub-8",
    descripcion: "Categor√≠a para ni√±os de 6 a 8 a√±os. Entrenamiento l√∫dico enfocado en diversi√≥n y desarrollo de habilidades b√°sicas del f√∫tbol.",
    tipo: "INFANTIL",
    edadMinima: 6,
    edadMaxima: 8,
    precio: {
      cuotaMensual: 12000,
      descuentos: {
        hermanos: 15,
        pagoAnual: 10
      }
    },
    estado: "ACTIVA",
    cupoMaximo: 20,
    horarios: [
      { dia: "MARTES", horaInicio: "16:00", horaFin: "17:00" },
      { dia: "JUEVES", horaInicio: "16:00", horaFin: "17:00" }
    ]
  },
  {
    nombre: "Infantil Sub-10",
    descripcion: "Categor√≠a para ni√±os de 8 a 10 a√±os. Introducci√≥n a conceptos b√°sicos de juego y trabajo en equipo.",
    tipo: "INFANTIL",
    edadMinima: 8,
    edadMaxima: 10,
    precio: {
      cuotaMensual: 15000,
      descuentos: {
        hermanos: 15,
        pagoAnual: 12
      }
    },
    estado: "ACTIVA",
    cupoMaximo: 22,
    horarios: [
      { dia: "LUNES", horaInicio: "16:30", horaFin: "17:30" },
      { dia: "MIERCOLES", horaInicio: "16:30", horaFin: "17:30" }
    ]
  },
  {
    nombre: "Infantil Sub-12",
    descripcion: "Categor√≠a para ni√±os de 10 a 12 a√±os. Desarrollo de t√©cnicas individuales y primeros conceptos t√°cticos.",
    tipo: "INFANTIL",
    edadMinima: 10,
    edadMaxima: 12,
    precio: {
      cuotaMensual: 18000,
      descuentos: {
        hermanos: 15,
        pagoAnual: 15
      }
    },
    estado: "ACTIVA",
    cupoMaximo: 24,
    horarios: [
      { dia: "MARTES", horaInicio: "17:00", horaFin: "18:30" },
      { dia: "VIERNES", horaInicio: "17:00", horaFin: "18:30" }
    ]
  },
  {
    nombre: "Juvenil Sub-15",
    descripcion: "Categor√≠a para adolescentes de 12 a 15 a√±os. Perfeccionamiento t√©cnico y desarrollo t√°ctico avanzado.",
    tipo: "JUVENIL",
    edadMinima: 12,
    edadMaxima: 15,
    precio: {
      cuotaMensual: 22000,
      descuentos: {
        hermanos: 12,
        pagoAnual: 18
      }
    },
    estado: "ACTIVA",
    cupoMaximo: 25,
    horarios: [
      { dia: "LUNES", horaInicio: "18:00", horaFin: "19:30" },
      { dia: "MIERCOLES", horaInicio: "18:00", horaFin: "19:30" }
    ]
  },
  {
    nombre: "Juvenil Sub-18",
    descripcion: "Categor√≠a para j√≥venes de 15 a 18 a√±os. Preparaci√≥n pre-competitiva con enfoque en formaci√≥n integral.",
    tipo: "JUVENIL",
    edadMinima: 15,
    edadMaxima: 18,
    precio: {
      cuotaMensual: 25000,
      descuentos: {
        hermanos: 10,
        pagoAnual: 20
      }
    },
    estado: "ACTIVA",
    cupoMaximo: 28,
    horarios: [
      { dia: "MARTES", horaInicio: "19:00", horaFin: "20:30" },
      { dia: "JUEVES", horaInicio: "19:00", horaFin: "20:30" }
    ]
  },
  {
    nombre: "Adultos Recreativo",
    descripcion: "Categor√≠a para adultos de 18 a 45 a√±os. F√∫tbol recreativo enfocado en mantener la forma f√≠sica y disfrutar del deporte.",
    tipo: "RECREATIVO",
    edadMinima: 18,
    edadMaxima: 45,
    precio: {
      cuotaMensual: 20000,
      descuentos: {
        hermanos: 8,
        pagoAnual: 15
      }
    },
    estado: "ACTIVA",
    cupoMaximo: 30,
    horarios: [
      { dia: "LUNES", horaInicio: "20:00", horaFin: "21:30" },
      { dia: "MIERCOLES", horaInicio: "20:00", horaFin: "21:30" }
    ]
  },
  {
    nombre: "Veteranos +45",
    descripcion: "Categor√≠a para adultos mayores de 45 a√±os. F√∫tbol adaptado con √©nfasis en el disfrute y la actividad f√≠sica saludable.",
    tipo: "VETERANOS",
    edadMinima: 45,
    edadMaxima: 70,
    precio: {
      cuotaMensual: 18000,
      descuentos: {
        hermanos: 10,
        pagoAnual: 20
      }
    },
    estado: "ACTIVA",
    cupoMaximo: 25,
    horarios: [
      { dia: "MARTES", horaInicio: "19:30", horaFin: "21:00" },
      { dia: "SABADO", horaInicio: "09:00", horaFin: "10:30" }
    ]
  },
  {
    nombre: "Competitivo Elite",
    descripcion: "Categor√≠a de alto rendimiento para j√≥venes de 16 a 22 a√±os con aspiraciones competitivas. Entrenamiento intensivo.",
    tipo: "COMPETITIVO",
    edadMinima: 16,
    edadMaxima: 22,
    precio: {
      cuotaMensual: 35000,
      descuentos: {
        hermanos: 5,
        pagoAnual: 25
      }
    },
    estado: "ACTIVA",
    cupoMaximo: 20,
    horarios: [
      { dia: "LUNES", horaInicio: "19:30", horaFin: "21:30" },
      { dia: "MIERCOLES", horaInicio: "19:30", horaFin: "21:30" },
      { dia: "VIERNES", horaInicio: "19:30", horaFin: "21:30" }
    ]
  },
  {
    nombre: "Entrenamiento Personalizado",
    descripcion: "Sesiones de entrenamiento individual o en grupos reducidos. Disponible para todas las edades con objetivos espec√≠ficos.",
    tipo: "ENTRENAMIENTO",
    edadMinima: 6,
    edadMaxima: 60,
    precio: {
      cuotaMensual: 45000,
      descuentos: {
        hermanos: 0,
        pagoAnual: 30
      }
    },
    estado: "ACTIVA",
    cupoMaximo: 5,
    horarios: [
      { dia: "SABADO", horaInicio: "08:00", horaFin: "12:00" },
      { dia: "DOMINGO", horaInicio: "08:00", horaFin: "12:00" }
    ]
  }
];

async function migrarCategorias() {
  try {
    console.log('üèÉ‚Äç‚ôÇÔ∏è Iniciando migraci√≥n de categor√≠as de escuela...');

    // Verificar si ya existen categor√≠as
    const categoriasExistentes = await CategoriaEscuela.countDocuments({});
    
    if (categoriasExistentes > 0) {
      console.log(`‚ö†Ô∏è  Ya existen ${categoriasExistentes} categor√≠as en la base de datos.`);
      console.log('¬øDesea continuar y agregar las categor√≠as por defecto? (Pueden duplicarse nombres)');
      
      // En un entorno real, podr√≠as implementar una confirmaci√≥n aqu√≠
      // Por ahora, continuaremos solo si no hay categor√≠as
      console.log('üõë Migraci√≥n cancelada para evitar duplicados.');
      return;
    }

    // Crear categor√≠as por defecto
    const categoriasCreadas = [];
    
    for (const categoriaData of categoriasPorDefecto) {
      try {
        const categoria = new CategoriaEscuela(categoriaData);
        await categoria.save();
        categoriasCreadas.push(categoria);
        
        console.log(`‚úÖ Categor√≠a creada: ${categoria.nombre} (${categoria.tipo})`);
      } catch (error) {
        console.error(`‚ùå Error creando categor√≠a ${categoriaData.nombre}:`, error.message);
      }
    }

    console.log('\nüìä Resumen de la migraci√≥n:');
    console.log(`‚úÖ Categor√≠as creadas exitosamente: ${categoriasCreadas.length}`);
    console.log(`‚ùå Errores: ${categoriasPorDefecto.length - categoriasCreadas.length}`);

    // Mostrar estad√≠sticas por tipo
    const estadisticasPorTipo = {};
    categoriasCreadas.forEach(categoria => {
      estadisticasPorTipo[categoria.tipo] = (estadisticasPorTipo[categoria.tipo] || 0) + 1;
    });

    console.log('\nüìà Categor√≠as por tipo:');
    Object.entries(estadisticasPorTipo).forEach(([tipo, cantidad]) => {
      console.log(`   ${tipo}: ${cantidad} categor√≠as`);
    });

    console.log('\nüéâ Migraci√≥n de categor√≠as completada exitosamente!');
    
    // Mostrar rango de precios
    const precios = categoriasCreadas.map(c => c.precio.cuotaMensual);
    const precioMin = Math.min(...precios);
    const precioMax = Math.max(...precios);
    const precioPromedio = precios.reduce((a, b) => a + b, 0) / precios.length;

    console.log('\nüí∞ Informaci√≥n de precios:');
    console.log(`   Precio m√≠nimo: $${precioMin.toLocaleString('es-AR')}`);
    console.log(`   Precio m√°ximo: $${precioMax.toLocaleString('es-AR')}`);
    console.log(`   Precio promedio: $${Math.round(precioPromedio).toLocaleString('es-AR')}`);

  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n de categor√≠as:', error);
    logger.error('Error en migraci√≥n de categor√≠as', { error: error.message });
    throw error;
  }
}

// Funci√≥n para ejecutar la migraci√≥n si se llama directamente
async function ejecutarMigracion() {
  try {
    // Conectar a la base de datos si no est√° conectado
    if (mongoose.connection.readyState === 0) {
      const DB_URI = process.env.DB_URI || 'mongodb://localhost:27017/proybackendgrupo06';
      await mongoose.connect(DB_URI);
      console.log('üîó Conectado a la base de datos para migraci√≥n');
    }

    await migrarCategorias();

  } catch (error) {
    console.error('üí• Error fatal en la migraci√≥n:', error);
    process.exit(1);
  } finally {
    // Cerrar la conexi√≥n si fue abierta aqu√≠
    if (mongoose.connection.readyState === 1) {
      await mongoose.disconnect();
      console.log('üîå Desconectado de la base de datos');
    }
  }
}

// Exportar tanto la funci√≥n de migraci√≥n como la funci√≥n de ejecuci√≥n
export { migrarCategorias, ejecutarMigracion };

// Si el archivo se ejecuta directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  ejecutarMigracion();
}
