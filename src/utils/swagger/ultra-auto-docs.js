/**
 * Sistema de documentaci√≥n ULTRA-AUTOM√ÅTICO
 * Mapea autom√°ticamente todos los m√≥dulos y validadores de la aplicaci√≥n
 */

import { 
  autoMapAllValidators, 
  autoCrudDocumentation, 
  generateSwaggerPaths 
} from './api-docs.js';

/**
 * Auto-detecta y documenta TODOS los m√≥dulos de la aplicaci√≥n
 * @param {Object} modules - Configuraci√≥n de m√≥dulos con sus validadores
 * @returns {Object} Documentaci√≥n completa de toda la aplicaci√≥n
 */
export function autoDocumentFullApplication(modules) {
  const fullDocumentation = {
    paths: {},
    schemas: {},
    tags: []
  };

  Object.entries(modules).forEach(([moduleName, moduleConfig]) => {
    const { 
      validators, 
      basePath, 
      entityName,
      customRoutes = null,
      isCrud = true 
    } = moduleConfig;

    // Generar documentaci√≥n del m√≥dulo
    let moduleDoc;
    
    if (isCrud && !customRoutes) {
      // Usar documentaci√≥n CRUD autom√°tica
      moduleDoc = autoCrudDocumentation({
        validators,
        basePath,
        moduleName,
        entityName: entityName || moduleName.toLowerCase()
      });
    } else if (customRoutes) {
      // Usar rutas personalizadas
      moduleDoc = {
        paths: generateSwaggerPaths(customRoutes, basePath),
        schemas: autoMapAllValidators(validators, moduleName)
      };
    } else {
      // Solo generar schemas sin paths
      moduleDoc = {
        paths: {},
        schemas: autoMapAllValidators(validators, moduleName)
      };
    }

    // Combinar con documentaci√≥n global
    Object.assign(fullDocumentation.paths, moduleDoc.paths);
    Object.assign(fullDocumentation.schemas, moduleDoc.schemas);
    
    // Agregar tag
    fullDocumentation.tags.push({
      name: moduleName,
      description: `Operaciones relacionadas con ${entityName || moduleName.toLowerCase()}s`
    });

    console.log(`‚úÖ M√≥dulo ${moduleName} documentado autom√°ticamente`);
    console.log(`   - Schemas: ${Object.keys(moduleDoc.schemas).length}`);
    console.log(`   - Endpoints: ${Object.keys(moduleDoc.paths).length}`);
  });

  return fullDocumentation;
}

/**
 * Configuraci√≥n autom√°tica de todos los m√≥dulos de la aplicaci√≥n
 * ¬°Solo necesitas importar los validadores y el sistema hace el resto!
 */
export async function setupAutoDocumentation() {
  try {
    // Importar din√°micamente todos los validadores
    const authValidators = await import('../modules/auth/validator/auth.validators.js');
    const userValidators = await import('../modules/user/validator/user.validators.js');
    const personaValidators = await import('../modules/persona/validator/persona.validators.js');

    // Configuraci√≥n autom√°tica de m√≥dulos
    const applicationModules = {
      'Auth': {
        validators: authValidators,
        basePath: '/api/auth',
        entityName: 'autenticaci√≥n',
        isCrud: false, // Auth tiene endpoints personalizados
        customRoutes: [
          // Estos se podr√≠an detectar autom√°ticamente analizando las rutas
        ]
      },
      
      'Users': {
        validators: userValidators,
        basePath: '/api/users',
        entityName: 'usuario',
        isCrud: true // CRUD est√°ndar
      },
      
      'Personas': {
        validators: personaValidators,
        basePath: '/api/personas', 
        entityName: 'persona',
        isCrud: true // CRUD est√°ndar
      }
    };

    // Generar documentaci√≥n completa autom√°ticamente
    const fullAppDocumentation = autoDocumentFullApplication(applicationModules);
    
    console.log('üöÄ Documentaci√≥n autom√°tica generada para toda la aplicaci√≥n:');
    console.log(`   üìä Total Schemas: ${Object.keys(fullAppDocumentation.schemas).length}`);
    console.log(`   üõ£Ô∏è  Total Endpoints: ${Object.keys(fullAppDocumentation.paths).length}`);
    console.log(`   üè∑Ô∏è  Total M√≥dulos: ${fullAppDocumentation.tags.length}`);

    return fullAppDocumentation;

  } catch (error) {
    console.error('‚ùå Error al generar documentaci√≥n autom√°tica:', error);
    return { paths: {}, schemas: {}, tags: [] };
  }
}

/**
 * Middleware para inyectar autom√°ticamente la documentaci√≥n en Swagger
 */
export function injectAutoDocumentation(swaggerConfig) {
  return async function(req, res, next) {
    if (!swaggerConfig._autoDocInjected) {
      const autoDoc = await setupAutoDocumentation();
      
      // Inyectar en la configuraci√≥n de Swagger
      Object.assign(swaggerConfig.paths || {}, autoDoc.paths);
      Object.assign(swaggerConfig.components?.schemas || {}, autoDoc.schemas);
      swaggerConfig.tags = [...(swaggerConfig.tags || []), ...autoDoc.tags];
      
      swaggerConfig._autoDocInjected = true;
      console.log('üìö Documentaci√≥n autom√°tica inyectada en Swagger');
    }
    next();
  };
}
