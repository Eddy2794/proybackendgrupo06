import app from './app.js';
import { connectDB } from './config/db.js';
import { logger } from './utils/logger.js';
import config from './config/index.js';

// Configuraci√≥n del puerto y entorno
const { port, env } = config;

let server;

// Funci√≥n para cierre graceful del servidor
const gracefulShutdown = (signal) => {
  logger.info(`üîÑ Received ${signal}, shutting down gracefully...`);
  
  if (server) {
    server.close(() => {
      logger.info('‚úÖ HTTP server closed');
      // Cerrar conexi√≥n de base de datos
      process.exit(0);
    });
    
    // Forzar cierre despu√©s de 10 segundos
    setTimeout(() => {
      logger.error('‚ùå Forced shutdown after timeout');
      process.exit(1);
    }, 10000);
  } else {
    process.exit(0);
  }
};

// Manejar se√±ales de terminaci√≥n
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
process.on('SIGINT', () => gracefulShutdown('SIGINT'));

// Manejar errores no capturados
process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
  gracefulShutdown('unhandledRejection');
});

process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception:', error);
  gracefulShutdown('uncaughtException');
});

// Funci√≥n para inicializar el servidor
const startServer = async () => {
  try {
    // Conectar a la base de datos
    await connectDB();
    logger.info('‚úÖ Database connected successfully');

    // Iniciar el servidor HTTP
    server = app.listen(port, () => {
      logger.info(`üöÄ Server running on port ${port} in ${env} mode`);
      logger.info(`üìö API Documentation: http://localhost:${port}/api-docs`);
      logger.info(`üè• Health Check: http://localhost:${port}/health`);
      
      if (env === 'development') {
        console.log(`\nüöÄ Server running at http://localhost:${port}`);
        console.log(`üìö API Docs: http://localhost:${port}/api-docs`);
        console.log(`üè• Health: http://localhost:${port}/health\n`);
      }
    });

    // Configurar timeout del servidor
    server.timeout = 30000; // 30 segundos
    server.keepAliveTimeout = 65000; // 65 segundos
    server.headersTimeout = 66000; // 66 segundos

    // Manejar errores del servidor
    server.on('error', (error) => {
      if (error.code === 'EADDRINUSE') {
        logger.error(`‚ùå Port ${port} is already in use`);
      } else {
        logger.error('‚ùå Server error:', error);
      }
      process.exit(1);
    });

  } catch (error) {
    logger.error('‚ùå Error starting server:', error);
    process.exit(1);
  }
};

// Iniciar el servidor
startServer();